// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  (function(window, $) {
    var enterFullscreen, exitFullscreen, firstScriptTag, fn, initializeVideo, pushToQueue, registerPackage, tag, toggleFullscreen, youTubeIframeAPIReady, _i, _len, _ref;
    youTubeIframeAPIReady = false;
    tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    pushToQueue = function(id, options) {
      $.YTplayers = $.YTplayers || {};
      $.YTplayers[id] = options;
      return $.YTplayers[id].initialized = false;
    };
    initializeVideo = function(id, options) {
      options.playerVars = options.playerVars || {};
      options.playerVars.wmode = 'transparent';
      window.player = new YT.Player(id, {
        wmode: 'transparent',
        width: options.width,
        height: options.height,
        videoId: options.videoId,
        playerVars: options.playerVars,
        events: {
          onReady: options.onReady,
          onStateChange: function(e) {
            if (typeof options.onStateChange === "function") {
              options.onStateChange(e);
            }
            switch (e.data) {
              case -1:
                return typeof options.onStart === "function" ? options.onStart(e) : void 0;
              case 0:
                return typeof options.onEnd === "function" ? options.onEnd(e) : void 0;
              case 1:
                return typeof options.onPlay === "function" ? options.onPlay(e) : void 0;
              case 2:
                return typeof options.onPause === "function" ? options.onPause(e) : void 0;
              case 3:
                return typeof options.onBuffer === "function" ? options.onBuffer(e) : void 0;
            }
          },
          onPlaybackQualityChange: options.onPlaybackQualityChange,
          onPlaybackRateChange: options.onPlaybackRateChange,
          onApiChange: options.onApiChange,
          onError: options.onError
        }
      });
      $.YTplayers[id] = player;
      return $("#" + id).data('YTplayer', player);
    };
    window.onYouTubeIframeAPIReady = function() {
      var id, value, _ref, _results;
      youTubeIframeAPIReady = true;
      _ref = $.YTplayers;
      _results = [];
      for (id in _ref) {
        if (!__hasProp.call(_ref, id)) continue;
        value = _ref[id];
        if (!value.initialized) {
          _results.push(value = initializeVideo(id, value));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    $.prototype.YTplayer = function(options) {
      this.id = $(this).attr('id');
      this.width = options.width || 640;
      this.height = options.height || 480;
      this.videoId = options.videoId || 'fz4MzJTeL0c';
      this.playerVars = options.playerVars;
      this.onReady = options.onReady, this.onStateChange = options.onStateChange, this.onStart = options.onStart, this.onEnd = options.onEnd, this.onPlay = options.onPlay, this.onPause = options.onPause, this.onBuffer = options.onBuffer, this.onPlaybackQualityChange = options.onPlaybackQualityChange, this.onPlaybackRateChange = options.onPlaybackRateChange, this.onError = options.onError, this.onApiChange = options.onApiChange;
      if (!youTubeIframeAPIReady) {
        return pushToQueue(this.id, this);
      } else {
        return initializeVideo(this.id, this);
      }
    };
    registerPackage = function(alias, name) {
      if (name == null) {
        name = alias;
      }
      return $.prototype[alias] = function() {
        var args, player, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        player = $(this).data('YTplayer');
        if (player === void 0) {
          return;
        }
        return (_ref = player[name]) != null ? _ref.apply(player, args) : void 0;
      };
    };
    registerPackage('play', 'playVideo');
    registerPackage('pause', 'pauseVideo');
    registerPackage('stop', 'stopVideo');
    registerPackage('clear', 'clearVideo');
    registerPackage('seekTo');
    _ref = ['setSize', 'mute', 'unMute', 'isMuted', 'setVolume', 'getVolume', 'getVideoLoadedFraction', 'getPlayerState', 'getCurrentTime', 'setPlaybackRate', 'getPlaybackRate', 'getAvailablePlaybackRate', 'getPlaybackQuality', 'setPlaybackQuality', 'getAvailableQualityLevels', 'getDuration', 'getVideoUrl', 'getVideoEmbedCode', 'addEventListener', 'removeEventListener', 'getIframe', 'destroy'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fn = _ref[_i];
      registerPackage(fn);
    }
    enterFullscreen = function(ele) {
      if (document.documentElement.requestFullscreen) {
        return ele.requestFullscreen();
      } else {
        if (typeof ele.msRequestFullScreen === "function") {
          ele.msRequestFullScreen();
        }
        if (typeof ele.mozRequestFullScreen === "function") {
          ele.mozRequestFullScreen();
        }
        return typeof ele.webkitRequestFullScreen === "function" ? ele.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT) : void 0;
      }
    };
    exitFullscreen = function(ele) {
      if (document.exitFullscreen) {
        return document.exitFullscreen();
      } else {
        if (typeof document.msExitFullscreen === "function") {
          document.msExitFullscreen();
        }
        if (typeof document.mozCancelFullScreen === "function") {
          document.mozCancelFullScreen();
        }
        return typeof document.webkitExitFullscreen === "function" ? document.webkitExitFullscreen() : void 0;
      }
    };
    toggleFullscreen = function(ele) {
      if (!document.fullScreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {
        return enterFullscreen(ele);
      } else {
        return exitFullscreen(ele);
      }
    };
    $.prototype.enterFullscreen = function() {
      return enterFullscreen($(this)[0]);
    };
    $.prototype.exitFullscreen = function() {
      return exitFullscreen($(this)[0]);
    };
    return $.prototype.toggleFullscreen = function() {
      return toggleFullscreen($(this)[0]);
    };
  })(window, window.jQuery);

}).call(this);
